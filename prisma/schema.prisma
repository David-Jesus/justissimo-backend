generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario        Int                @id @default(autoincrement())
  email             String             @unique @db.VarChar(200)
  senha             String             @db.VarChar(200)
  advogado          Advogado?
  cliente           Cliente?
  recuperacao_senha RecuperacaoSenha[]

  @@map("usuario")
}

model Cliente {
  id_cliente    Int         @id @default(autoincrement())
  fk_usuario    Int?        @unique
  nome          String      @db.VarChar(55)
  dt_nascimento DateTime
  nr_cpf        String      @db.VarChar(11)
  nr_cnpj       String      @db.VarChar(14)
  usuario       Usuario?    @relation(fields: [fk_usuario], references: [id_usuario], onDelete: Cascade)
  avaliacoes    Avaliacao[]
  endereco      Endereco?

  @@map("cliente")
}

model Advogado {
  id_advogado   Int         @id @default(autoincrement())
  fk_usuario    Int?        @unique
  nome          String      @db.VarChar(55)
  dt_nascimento DateTime
  nr_cna        String      @db.VarChar(15)
  uf_cna        String      @db.VarChar(2)
  nr_cpf        String      @db.VarChar(11)
  nr_cnpj       String      @db.VarChar(14)
  tel_fixo      String?     @db.VarChar(45)
  tel_celular   String?     @db.VarChar(45)
  nota          Float?
  usuario       Usuario?    @relation(fields: [fk_usuario], references: [id_usuario], onDelete: Cascade)
  avaliacoes    Avaliacao[]
  endereco      Endereco?
  config_agenda Configuracao_agenda[]

  @@map("advogado")
}

model Endereco {
  id_endereco Int       @id @default(autoincrement())
  fk_cliente  Int?      @unique
  fk_advogado Int?      @unique
  nr_cep      String?   @db.VarChar(8)
  numero      Int?
  rua         String?   @db.VarChar(100)
  bairro      String?   @db.VarChar(100)
  cidade      String?   @db.VarChar(100)
  estado      String?   @db.VarChar(100)
  logradouro  String?   @db.VarChar(100)
  complemento String?   @db.VarChar(60)
  advogado    Advogado? @relation(fields: [fk_advogado], references: [id_advogado], onDelete: Cascade)
  cliente     Cliente?  @relation(fields: [fk_cliente], references: [id_cliente], onDelete: Cascade)

  @@map("endereco")
}

model Avaliacao {
  id_avaliacao Int       @id @default(autoincrement())
  fk_cliente   Int?
  fk_advogado  Int?
  nota         Float
  descricao    String?   @db.VarChar(200)
  advogado     Advogado? @relation(fields: [fk_advogado], references: [id_advogado], onDelete: Cascade)
  cliente      Cliente?  @relation(fields: [fk_cliente], references: [id_cliente], onDelete: Cascade)

  @@map("avaliacao")
}

model RecuperacaoSenha {
  id_recuperacao_senha Int      @id @default(autoincrement())
  fk_usuario           Int
  codigo_recuperacao   String   @db.VarChar(100)
  dt_expiracao         DateTime @default(now())
  usuario              Usuario  @relation(fields: [fk_usuario], references: [id_usuario], onDelete: Cascade)

  @@map("recuperacao_senha")
}

model Configuracao_agenda {
  id_configuracao_agenda Int       @id @default(autoincrement())
  fk_advogado            Int
  dia                    String    @db.VarChar(45) 
  hora_inicial           DateTime
  hora_final             DateTime
  duracao                Int
  advogado               Advogado  @relation(fields: [fk_advogado], references: [id_advogado], onDelete: Cascade)
@@map("configuracao_agenda")
}
